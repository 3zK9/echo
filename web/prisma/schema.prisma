generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth core models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  // OIDC
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?

  // App-specific
  username       String?    @unique
  tweets         Echo[]
  likes          EchoLike[]
  profile        Profile?

  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Echo {@@map("Tweet")
  id         String   @id @default(cuid())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  text       String   @db.Text
  createdAt  DateTime @default(now())

  // Reposts: an echo can optionally reference an original echo
  originalId String?
  original   Echo?   @relation("ReEchoes", fields: [originalId], references: [id])
  reposts   Echo[]  @relation("ReEchoes")

  likes      EchoLike[]

  @@index([authorId, createdAt])
  @@index([createdAt])
  @@index([originalId])
}

model EchoLike {@@map("Like")
  userId   String
  echoId   String
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  echo     Echo @relation(fields: [echoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, echoId])
  @@index([echoId])
  @@index([userId, createdAt])
}

model Profile {
  userId    String  @id
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String? @db.Text
  link      String? @db.Text
  updatedAt DateTime @updatedAt
}
