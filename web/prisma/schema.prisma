generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth core models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  // OIDC
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?

  // App-specific
  username       String?    @unique
  echoes         Echo[]
  likes          EchoLike[]
  profile        Profile?
  devices        Device[]
  sentDMs        DMMessage[] @relation("DMFromUser")
  receivedDMs    DMMessage[] @relation("DMToUser")

  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Echo {
  id         String   @id @default(cuid())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  text       String   @db.Text
  createdAt  DateTime @default(now())

  // Reposts: an echo can optionally reference an original echo
  originalId String?
  original   Echo?   @relation("ReEchoes", fields: [originalId], references: [id])
  reposts   Echo[]  @relation("ReEchoes")

  // Replies: an echo can optionally be a reply to another echo
  replyToId String?
  replyTo   Echo?   @relation("Replies", fields: [replyToId], references: [id])
  replies   Echo[]  @relation("Replies")

  likes      EchoLike[]

  @@index([authorId, createdAt])
  @@index([createdAt])
  @@index([originalId])
  @@index([replyToId])
}

model EchoLike {@@map("Like")
  userId   String
  echoId   String
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  echo     Echo @relation(fields: [echoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, echoId])
  @@index([echoId])
  @@index([userId, createdAt])
}

model Profile {
  userId    String  @id
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String? @db.Text
  link      String? @db.Text
  updatedAt DateTime @updatedAt
}


// E2EE Signal MVP models
model Device {
  id              String   @id // client-assigned device id (e.g., uuid/cuid)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrationId  Int
  identityKeyPub  String   @db.Text
  createdAt       DateTime @default(now())

  signedPreKeys   SignedPreKey[]
  preKeys         PreKey[]
  messages        DMMessage[] @relation("SenderDeviceMessages")

  @@index([userId, createdAt])
}

model SignedPreKey {
  deviceId   String
  device     Device  @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  keyId      Int
  pubKey     String  @db.Text
  signature  String  @db.Text
  createdAt  DateTime @default(now())

  @@id([deviceId, keyId])
  @@index([deviceId, createdAt])
}

model PreKey {
  deviceId   String
  device     Device  @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  keyId      Int
  pubKey     String  @db.Text
  consumedAt DateTime?

  @@id([deviceId, keyId])
  @@index([deviceId, consumedAt])
}

model DMMessage {
  id             String   @id @default(cuid())
  fromUserId     String
  toUserId       String
  senderDeviceId String
  ciphertext     String   @db.Text
  sentAt         DateTime @default(now())
  deliveredAt    DateTime?
  readAt         DateTime?

  fromUser User    @relation("DMFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User    @relation("DMToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  sender   Device  @relation("SenderDeviceMessages", fields: [senderDeviceId], references: [id], onDelete: NoAction)

  @@index([fromUserId, toUserId, sentAt])
  @@index([toUserId, sentAt])
}
